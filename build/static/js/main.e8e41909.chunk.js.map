{"version":3,"sources":["components/Error.tsx","components/Loading.tsx","components/Forecast.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Error","react_default","a","createElement","Component","Loading","Forecast","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","loading","temp","wind","rh","time","danger","inherits","createClass","key","value","_this2","fetch","then","res","status","json","data","setState","tempF","windMPH","moment","observationTime","calendar","_this$state","Error_Error","Loading_Loading","className","App","style","height","background","backgroundSize","overflow","components_Forecast","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0NAEqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAJ2BC,aCAdC,mLAEjB,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCAJ6BC,aC8EtBE,EAhEf,SAAAC,GACE,SAAAD,EAAYE,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,OAAO,EACPC,SAAS,EACTC,MAAO,IACPC,MAAO,IACPC,IAAK,IACLC,KAAM,GACNC,OAAQ,WAVcd,EAD5B,OAAAC,OAAAc,EAAA,EAAAd,CAAAJ,EAAAC,GAAAG,OAAAe,EAAA,EAAAf,CAAAJ,EAAA,EAAAoB,IAAA,oBAAAC,MAAA,WAgBsB,IAAAC,EAAAhB,KAClBiB,MAAK,kCACFC,KAAK,SAAAC,GACe,MAAfA,EAAIC,OAQRD,EAAIE,OAAOH,KAAK,SAAAI,GAAI,OAAIN,EAAKO,SAAS,CACpClB,OAAO,EACPC,SAAS,EACTC,KAAMe,EAAKA,KAAKE,MAChBhB,KAAMc,EAAKA,KAAKG,QAChBhB,GAAIa,EAAKA,KAAKb,GACdC,KAAMgB,IAAOJ,EAAKA,KAAKK,iBAAiBC,WACxCjB,OAAQW,EAAKA,KAAKX,WAdlBK,EAAKO,SAAS,CACZlB,OAAO,EACPC,SAAS,QAtBrB,CAAAQ,IAAA,SAAAC,MAAA,WAuC4B,IAAAc,EACiC7B,KAAKI,MAAtDC,EADgBwB,EAChBxB,MAAOC,EADSuB,EACTvB,QAASC,EADAsB,EACAtB,KAAMC,EADNqB,EACMrB,KAAMC,EADZoB,EACYpB,GAAIC,EADhBmB,EACgBnB,KAAMC,EADtBkB,EACsBlB,OAE9C,OAAIN,EACKhB,EAAAC,EAAAC,cAACuC,EAAD,MAGLxB,EACKjB,EAAAC,EAAAC,cAACwC,EAAD,MAIP1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBAAcoB,GAEdtB,EAAAC,EAAAC,cAAA,KAAGyC,UAAW,QAAd,SAA8BzB,EAA9B,UACAlB,EAAAC,EAAAC,cAAA,kBAAWiB,EAAX,QACAnB,EAAAC,EAAAC,cAAA,gBAASkB,EAAT,KAEApB,EAAAC,EAAAC,cAAA,MAAIyC,UAAW,QAAf,gBAAoC3C,EAAAC,EAAAC,cAAA,WAAWmB,QA1DvDhB,EAAA,CAA8BF,aCYfyC,mLAvBX,OACE5C,EAAAC,EAAAC,cAAA,OACE2C,MAAQ,CACNC,OAAU,UAEZ9C,EAAAC,EAAAC,cAAA,OACEyC,UAAU,MACVE,MAAQ,CACNE,WAAc,6DACdC,eAAkB,QAClBF,OAAU,OACVG,SAAY,WAEdjD,EAAAC,EAAAC,cAAA,MAAIyC,UAAW,oBAAf,eACA3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAW,aACd3C,EAAAC,EAAAC,cAACgD,EAAD,gBAjBM/C,aCSEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.e8e41909.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Error extends Component {\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div>\r\n        <h1>Error!</h1>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport Error from './Error';\r\nimport Loading from './Loading';\r\n\r\n\r\ninterface State {\r\n  error: boolean,\r\n  loading: boolean,\r\n  temp: number,\r\n  wind: number,\r\n  rh: number,\r\n  time: string,\r\n  danger: string,\r\n}\r\n\r\nexport class Forecast extends Component<any, State> {\r\n  constructor(props: State) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: false,\r\n      loading: true,\r\n      temp: -999,\r\n      wind: -999,\r\n      rh: -999,\r\n      time: '',\r\n      danger: 'Invalid',\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`https://api.redsage.io/weather`)\r\n      .then(res => {\r\n        if (res.status !== 200) {\r\n          this.setState({\r\n            error: true,\r\n            loading: false,\r\n          });\r\n          return;\r\n        }\r\n\r\n        res.json().then(data => this.setState({\r\n          error: false,\r\n          loading: false,\r\n          temp: data.data.tempF,\r\n          wind: data.data.windMPH,\r\n          rh: data.data.rh,\r\n          time: moment(data.data.observationTime).calendar(),\r\n          danger: data.data.danger,\r\n        }));\r\n      });\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    const { error, loading, temp, wind, rh, time, danger } = this.state;\r\n\r\n    if (error) {\r\n      return <Error/>\r\n    }\r\n\r\n    if (loading) {\r\n      return <Loading/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>Danger: { danger }</h3>\r\n\r\n        <p className={'mt-4'}>Temp: { temp } &deg;F</p>\r\n        <p>Wind: { wind } MPH</p>\r\n        <p>RH: { rh }%</p>\r\n\r\n        <h6 className={'mt-4'}>Last updated:<br></br>{ time }</h6>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forecast;","import React, { Component } from 'react';\nimport Forecast from './components/Forecast';\n\nclass App extends Component {\n  render() {\n    return (\n      <div\n        style={ {\n          'height': '100vh',\n        } }>\n        <div\n          className=\"App\"\n          style={ {\n            'background': 'url(img/firewatch-tower.jpg) no-repeat center center fixed',\n            'backgroundSize': 'cover',\n            'height': '100%',\n            'overflow': 'hidden',\n          } }>\n          <h1 className={'text-center mt-5'}>FireWeather</h1>\n          <div className={'mt-4 mx-5'}>\n            <Forecast/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}